import pandas as pd
from xgboost import XGBClassifier
from sklearn.datasets import load_breast_cancer
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from IPython.display import Markdown, display

from giskard import Dataset, Model, scan, testing, Suite, GiskardClient

# Constants.
TARGET_COLUMN_NAME = "target"

RANDOM_SEED = 42
data = load_breast_cancer(as_frame=True)
features = data['data']
target = data[TARGET_COLUMN_NAME]

# Train/test split.
X_train, X_test, y_train, y_test = train_test_split(features.loc[:, features.columns != TARGET_COLUMN_NAME], target,
                                                    random_state=RANDOM_SEED)
raw_data = pd.concat([X_test, y_test], axis=1)
giskard_dataset = Dataset(
    df=raw_data,  # A pandas.DataFrame that contains the raw data (before all the pre-processing steps) and the actual ground truth variable (target).
    target="target",  # Ground truth variable.
    name="breast_cancer",  # Optional.
)

xgb = XGBClassifier()
xgb.fit(X_train, y_train)

# Evaluation.
y_test_pred = xgb.predict(X_test)
print(classification_report(y_test, y_test_pred))



giskard_model = Model(
    model=xgb,  # A prediction function that encapsulates all the data pre-processing steps and that could be executed with the dataset used by the scan.
    model_type="classification",  # Either regression, classification or text_generation.
    name="breast_cancer_xgboost",  # Optional.
    classification_labels=[0, 1],  # Their order MUST be identical to the prediction_function's output order.
    feature_names=X_test.columns,  # Default: all columns of your dataset.
)

# Validate the model wrapping.
y_test_pred_wrapped = giskard_model.predict(giskard_dataset).raw_prediction
print(classification_report(y_test, y_test_pred_wrapped))
results = scan(giskard_model, giskard_dataset)
display(results)

html_content = results.to_html()

# Save HTML content to a file with UTF-8 encoding
with open("LLM_reportss2.html", "w", encoding="utf-8") as file:
    file.write(html_content)

test_suite = results.generate_test_suite("Test suite generated by scan")
test_suite.run()